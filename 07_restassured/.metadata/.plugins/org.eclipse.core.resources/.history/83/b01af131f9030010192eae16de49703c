package cookiesHeaders;

import static io.restassured.RestAssured.given;
import static org.testng.Assert.assertEquals;

import java.util.HashMap;
import java.util.Map;

import org.testng.annotations.Test;

import io.restassured.response.Response;

public class GetCookies{
//  @Test 
  void testCookies() {
    given()
    .cookie("cookieName", "cookieValue")  // Set a cookie
    .cookie("session", "abcd1234")        // Another cookie
    .header("Content-Type", "application/json")  // Set header
    .header("Authorization", "Bearer token123")  // Another header
.when()
    .get("/some/endpoint")
.then()
    .statusCode(200)
    .cookie("SESSIONID", "abcd1234")  // Validate a cookie in the response
    .cookie("SESSIONID", equals("abcd1234"))  // Validate that the SESSIONID is 'abcd1234'
    .header("Content-Type", "application/json") // Validate 'Content-Type' header
    .header("Content", equals("application/json")) // Validate header value
    .header("Authorization", "Bearer token123");  // Validate multiple headers

//Set Cookies and Headers Using a Map
Map<String, String> cookies = new HashMap<>();
cookies.put("cookieName1", "cookieValue1");
cookies.put("cookieName2", "cookieValue2");

Map<String, String> headers = new HashMap<>();
headers.put("Authorization", "Bearer token123");
headers.put("Content-Type", "application/json");

given()
    .headers(headers)  // Set multiple headers: headers(Map<String, String>)
    .cookies(cookies)  // Set cookies using a Map: cookies(Map<String, String>)
.when()
    .get("/some/endpoint")
.then()
    .statusCode(200);

//Extracting Cookies and Headers for Further Use
// First request to set the cookies (e.g., login)
Response response = given()
    .formParam("username", "testUser")
    .formParam("password", "password123")
.when()
    .post("/login");

// Extract cookies from the response
String sessionId = response.getCookie("JSESSIONID");

// Use the extracted cookie in a subsequent request
given()
    .cookie("JSESSIONID", sessionId)  // Use the extracted session cookie
.when()
    .get("/protected/endpoint")
.then()
    .statusCode(200);

// Extracting a cookie from the response
String sessionId2 = when()
    .get("/login")
.then()
    .extract()
    .cookie("SESSIONID");

// Using extracted cookie in another request
given()
    .cookie("SESSIONID", sessionId2)
    .when()
    .get("/protected/endpoint")
.then()
    .statusCode(200);

// Extracting a header from the response
String contentType = when()
    .get("/some/endpoint")
.then()
    .extract()
    .header("Content-Type");

// Using extracted header in further validation
assertEquals(contentType, "application/json");

    given()
    .when()
      .get("https://www.google.com/")
    .then() // AEC values changes everytime hence this fails hence test can be considered as passed
      .cookie("AEC", "Ae3NU9M2jEus9hBZeaxviAyB3UmCZs6Zm-MdrosTw47tpdSmsZmDQ-12W_k")
      .log().all();
  }

  @Test
  void getAllCookiesDetails() {
    Response res = 
        given()
        .when()
          .get("https://www.google.com/");

//get Single Cookie
    String aec = res.getCookie("AEC");
    System.out.println("AEC :: " + aec);
//get All Cookies
    Map<String, String> cookiesDetails = res.getCookies();
    
    for (String key : cookiesDetails.keySet()) {
      String cookieValue = res.getCookie(key);
      System.out.println(key+" :: "+cookieValue);
    }
  }
}
