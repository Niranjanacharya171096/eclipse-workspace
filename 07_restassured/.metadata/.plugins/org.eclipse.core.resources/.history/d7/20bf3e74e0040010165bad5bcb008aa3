package serializationDeserialization;

import java.util.List;
import java.util.Map; 

import org.testng.annotations.Test;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;

//import static io.restassured.RestAssured.*; //to use given() without RestAssured

public class SerializationDeserialization1 {
//  @Test(priority = 1)
  void testSerialization() {
    // Set base URI
    RestAssured.baseURI = "https://jsonplaceholder.typicode.com";
    RestAssured.baseURI = "http://localhost:3000/students";

    // Create Java object
//    User user = new User(2, "John Doe", "john.doe@example.com");
    String[] courseArray = {"math", "C"};
    Students student = new Students("niranjan","Bengaluru", "255455", courseArray);
    // Send POST request with serialized JSON body
    RestAssured.given().contentType(ContentType.JSON).body(student) // Java object automatically converted to JSON
        .when().post().then().statusCode(201) // Validate response status
        .log().all();
  }

  @Test(priority = 2)
  void testDeSerialization() {
    // Set base URI
//    RestAssured.baseURI = "https://jsonplaceholder.typicode.com";
    RestAssured.baseURI = "http://localhost:3000/students";

    // GET request and deserialize response
//    Response response = RestAssured.given().when().get("?id=1");
//    System.out.println(response.asPrettyString());
    
// Convert JSON response to Java Object
//  User user = response.as(User.class);

    // Print values
//    System.out.println("User ID: " + user.getId());
//    System.out.println("Name: " + user.getName());
//    System.out.println("Email: " + user.getEmail());
    
//  Students student = response.as(Students.class);
//  System.out.println(student);

//Use a Map Instead of POJO
//    Map<String, Object> userMap = response.as(Map.class);
//
//    // Print all fields dynamically
//    System.out.println(userMap);
    
    List<Students> students = RestAssured.given()
        .queryParam("id", 1)
        .when()
        .get()
        .then()
        .extract()
        .body()
        .jsonPath()
        .getList("", Students.class); // Extract as List<User>

    // Print all users
    for (Students student : students) {
        System.out.println(student.getName());
    }
  }
}
